#version 430

#define LOCAL_SIZE_X 0

layout(local_size_x=512, local_size_y=1, local_size_z=1) in;

struct Boid {
    vec3 pos;
    float a; // padding
    vec3 dir;
    float b; // padding
};

struct Cell {
    uint cell_id;
    uint boid_id;
};

layout(std430, binding=0) readonly buffer buffer_0 {
    Boid boids[];
};

layout(std430, binding=1) readonly buffer buffer_1 {
    Cell table[];
};

layout(std430, binding=2) writeonly buffer buffer_2 {
    Cell sorted_table[];
};

layout(std430, binding=3) writeonly buffer buffer_3 {
    uint cell_start[];
};


// uniform float map_size;
uniform int boid_count;
uniform float cell_spacing;
uniform uint table_size;

ivec3 cell_xyz(vec3 pos) {
    return ivec3(floor(pos/cell_spacing));
}

uint hash(ivec3 cell_index) {
    int h = (cell_index.x * 92837111) ^ (cell_index.y * 689287499) ^ (cell_index.z * 283923481);
    return abs(h) % table_size;
    // const uint p1 = 73856093; // some large primes
    // const uint p2 = 19349663;
    // const uint p3 = 83492791;
    // uint n = p1 * cell_index.x ^ p2*cell_index.y ^ p3*cell_index.z;
    // n %= (table_size);
    // return n;
}


void main() {
    const uint index = gl_GlobalInvocationID.z * gl_NumWorkGroups.y * gl_NumWorkGroups.x +
                        gl_GlobalInvocationID.y * gl_NumWorkGroups.x +
                        gl_GlobalInvocationID.x;

    // const Boid boid = boids[boid_index];
    // ivec3 cell_index = cell_xyz(boid.pos);
    // uint hash_index = hash(cell_index);



    // given an array arr of length n, this code sorts it in place
    // all indices run from 0 to n-1
    for (k = 2; k <= n; k *= 2) // k is doubled every iteration
        for (j = k/2; j > 0; j /= 2) // j is halved at every iteration, with truncation of fractional parts
            for (i = 0; i < n; i++)
                l = bitwiseXOR (i, j); // in C-like languages this is "i ^ j"
                if (l > i)
                    if (  (bitwiseAND (i, k) == 0) AND (arr[i] > arr[l])
                       OR (bitwiseAND (i, k) != 0) AND (arr[i] < arr[l]) )
                          swap the elements arr[i] and arr[l]


}

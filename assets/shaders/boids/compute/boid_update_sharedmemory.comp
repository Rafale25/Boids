#version 430

// #define LOCAL_SIZE_X 0

#define CUBE 0
#define CUBE_T 0
#define SPHERE 0
#define SPHERE_T 0

#define PI 3.1415926535897932384626

layout(local_size_x=32, local_size_y=1, local_size_z=1) in;

#include shaders/boids/boid_struct.glsl

layout(std430, binding=0) readonly buffer boids_in {
    Boid boids[];
} In_boids;

layout(std430, binding=1) writeonly restrict buffer boids_out {
    Boid boids[];
} Out_boids;

layout(std430, binding=2) readonly buffer buffer_cell_start {
    uint cell_start[];
};

layout(std430, binding=3) readonly buffer buffer_compact_cells {
    uint compact_cells[];
};

shared uint local_counter; // atomic

shared Boid neighbours[512];

uniform int boid_count;
uniform float speed;
uniform float map_size;
uniform float view_distance;
uniform float view_angle;

uniform float separation_force;
uniform float alignment_force;
uniform float cohesion_force;

// uniform float cell_spacing;

#include shaders/boids/cell_xyz.glsl
#include shaders/boids/hash.glsl


ivec3 index2Cell(uint index) {
    uint x = index % 3;
    uint y = uint(index / 3);
    uint z = uint(index / (3*3));
    return ivec3(x, y, z);
}

/*
load neighbours in shared memory
find/get the number of boid in current cell
distribute computation evenly between the 32 threads
*/

void main() {
    const uint index = gl_GlobalInvocationID.x;

    if (index >= boid_count) {
        return;
    }

    if (gl_LocalInvocationID.x == 0) {
        local_counter = 0;
    }
    memoryBarrierShared();

    const uint current_cell_index = compact_cells[gl_WorkGroupID.x];
    const uint current_cell_boid_count = index == 0 ? cell_start[index] : cell_start[index] - cell_start[index - 1];
    const uint boid_per_thread = uint(ceil(float(current_cell_boid_count) / 32.0));

    // if (gl_LocalInvocationID.x < 27) {}

    const ivec3 ourCell = index2Cell(current_cell_index);

    if (gl_LocalInvocationID.x == 0) {
        for (int z = ourCell.z - 1; z <= ourCell.z + 1; ++z) {
        for (int y = ourCell.y - 1; y <= ourCell.y + 1; ++y) {
        for (int x = ourCell.x - 1; x <= ourCell.x + 1; ++x) {

            const uint cell_index = hash(ivec3(x, y, z), boid_count);

            for (uint i = cell_start[cell_index] ; In_boids.boids[i].cell_index == cell_index && i < boid_count ; ++i) {

                neighbours[local_counter] = In_boids.boids[i];

                local_counter += 1;
            }

        }
        }
        }
    }

    memoryBarrierShared();
    // --

    vec3 ourDir = In_boids.boids[index].dir.xyz;
    vec3 ourPos = In_boids.boids[index].pos.xyz + (ourDir * speed);

    uint nb_flockmates = 0;
    vec3 averageDirection = vec3(0.0, 0.0, 0.0);
    vec3 averagePosition = vec3(0.0, 0.0, 0.0);
    vec3 totalForce = vec3(0.0, 0.0, 0.0);

    for (uint i = 0 ; i < local_counter ; ++i) {
        if (index == i) continue; // don't check if itself

        const vec3 theirPos = neighbours[i].pos.xyz;
        const vec3 theirDir = neighbours[i].dir.xyz;

        const vec3 offset = ourPos - theirPos;
        const float sqrDist = dot(offset, offset);
        if (sqrDist < view_distance * view_distance) {

            // length definitly has an impact on performances
            const float r = dot((theirPos - ourPos)/length(theirPos - ourPos), ourDir/length(ourDir));
            if (length(acos(r)) <= view_angle) {
                nb_flockmates += 1;
                averageDirection += theirDir;
                averagePosition += theirPos;

                // separation
                totalForce += offset / sqrDist;
            }
        }
    }

    // separation
    ourDir += totalForce * separation_force;

    if (nb_flockmates != 0) {
        // alignment
        averageDirection /= nb_flockmates;
        ourDir += averageDirection * alignment_force;

        // cohesion
        averagePosition /= nb_flockmates;
        ourDir += -(ourPos - averagePosition) * cohesion_force;
    }

    // border limit
    #if (CUBE == 1)
        const vec3 np = ourPos + (ourDir * speed);
        const float mp2 = map_size * 0.5;
        if (np.x < -mp2 || np.x > mp2 || np.y < -mp2 || np.y > mp2 || np.z < -mp2 || np.z > mp2) {
            const vec3 to_center = normalize(vec3(0, 0, 0) - ourPos);
            ourDir += to_center * 0.1;
        }
    #endif

    #if (CUBE_T == 1)
        const float map_size2 = map_size * 0.5;
        if (ourPos.x < -map_size2)
            ourPos.x = map_size2;
        else if (ourPos.x > map_size2)
            ourPos.x = -map_size2;

        if (ourPos.y < -map_size2)
            ourPos.y = map_size2;
        else if (ourPos.y > map_size2)
            ourPos.y = -map_size2;

        if (ourPos.z < -map_size2)
            ourPos.z = map_size2;
        else if (ourPos.z > map_size2)
            ourPos.z = -map_size2;
    #endif

    #if (SPHERE == 1)

        if (length(ourPos) > map_size) {
            const vec3 to_center = normalize(vec3(0, 0, 0) - ourPos);
            ourDir += to_center * 0.1;
        }
    #endif

    #if (SPHERE_T == 1)
        if (length(ourPos) > map_size) {
            ourPos = -normalize(ourPos) * map_size;
        }
    #endif

    Out_boids.boids[index].pos.xyz = ourPos;
    Out_boids.boids[index].dir.xyz = normalize(ourDir);
}

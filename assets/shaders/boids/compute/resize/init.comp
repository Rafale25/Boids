#version 430 core

#define LOCAL_SIZE_X 0

layout(local_size_x=LOCAL_SIZE_X, local_size_y=1, local_size_z=1) in;

#include shaders/boids/boid_struct.glsl

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

layout(std430, binding=0) readonly buffer buffer_boids_old {
    Boid boids[];
};

layout(std430, binding=1) writeonly buffer buffer_boids_new {
    Boid boids_tmp[];
};

uniform uint map_size;
uniform uint u_old_boid_count;
uniform uint u_new_boid_count;

void main() {
    const uint index = gl_GlobalInvocationID.x;

    if (index >= u_new_boid_count)
        return;

    if (index > u_old_boid_count) {
        float id = float(index);

        Boid b;
        vec3 pos = vec3(
            (rand(vec2(id*0.323, id*0.793)) * 2.0 - 1.0) * (map_size/2),
            (rand(vec2(id*0.732, id*0.598)) * 2.0 - 1.0) * (map_size/2),
            (rand(vec2(id*0.128, id*0.453)) * 2.0 - 1.0) * (map_size/2));
        vec3 dir = vec3(
            rand(vec2(id*0.323, id*0.923)) * 2.0 - 1.0,
            rand(vec2(id*0.113, id*0.993)) * 2.0 - 1.0,
            rand(vec2(id*0.513, id*0.343)) * 2.0 - 1.0
        );
        dir = normalize(dir);

        b.pos.xyz = pos;
        b.cell_index = 0;
        b.dir.xyz = dir;

        boids_tmp[index] = b;

    } else {
        boids_tmp[index] = boids[index];
    }

}

#version 430 core

#define LOCAL_SIZE_X 0

layout(local_size_x=LOCAL_SIZE_X, local_size_y=1, local_size_z=1) in;

#include shaders/boids/boid_struct.glsl

uint hash(uint x) {
    x ^= 2747636419u;
    x *= 2654435769u;
    x ^= x >> 16;
    x *= 2654435769u;
    x ^= x >> 16;
    x *= 2654435769u;
    return x;
}

float random_uniform(uint seed) {
    return float(hash(seed)) / 4294967295u;
}

float map(float value, float min1, float max1, float min2, float max2) {
    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

// vec3 random_in_area(uint seed, vec3 minP, vec3 maxP) {
//     map(random_uniform(uint(index*u_time*7.383)), 0.0, 1.0, -map_size*0.5, map_size*0.5),
// }

layout(std430, binding=0) readonly buffer buffer_boids_old {
    Boid boids[];
};

layout(std430, binding=1) writeonly buffer buffer_boids_new {
    Boid boids_tmp[];
};

uniform float u_time;
uniform float map_size;
uniform uint u_old_boid_count;
uniform uint u_new_boid_count;

void main() {
    const uint index = gl_GlobalInvocationID.x;

    if (index >= u_new_boid_count)
        return;

    if (index >= u_old_boid_count) {
        Boid b;

        vec3 pos = vec3(
            map(random_uniform(uint(index*u_time*7.383)), 0.0, 1.0, -map_size*0.5, map_size*0.5),
            map(random_uniform(uint(index*u_time*1.293)), 0.0, 1.0, -map_size*0.5, map_size*0.5),
            map(random_uniform(uint(index*u_time*3.877)), 0.0, 1.0, -map_size*0.5, map_size*0.5)
        );

        vec3 dir = normalize(vec3(
            random_uniform(uint(index*u_time*2.383)) - 0.5,
            random_uniform(uint(index*u_time*4.247)) - 0.5,
            random_uniform(uint(index*u_time*5.917)) - 0.5
        ));

        b.pos.xyz = pos;
        b.cell_index = 0;
        b.dir.xyz = dir;

        boids_tmp[index] = b;

    } else {
        boids_tmp[index] = boids[index];
    }

}

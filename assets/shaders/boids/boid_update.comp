#version 430

#define LOCAL_SIZE_X 0

#define CUBE 0
#define CUBE_T 0
#define SPHERE 0
#define SPHERE_T 0

#define PI 3.1415926535897932384626

layout(local_size_x=LOCAL_SIZE_X, local_size_y=1, local_size_z=1) in;

// struct Boid {
//     vec3 pos;
//     float a; // useless as fuck
//     vec3 dir;
//     float b; // useless as fuck
// };
struct Boid {
    vec4 pos;
    vec4 dir;
};

struct Cell {
    uint cell_id;
    uint boid_id;
};

layout(std430, binding=0) readonly buffer boids_in {
    Boid boids[];
} In_boids;

layout(std430, binding=1) writeonly restrict buffer boids_out {
    Boid boids[];
} Out_boids;

layout(std430, binding=2) readonly buffer buffer_2 {
    Cell sorted_table[];
};

layout(std430, binding=3) readonly buffer buffer_3 {
    uint cell_start[];
};

uniform int boid_count;
uniform float speed;
uniform float map_size;
uniform float view_distance;
uniform float view_angle;

uniform float separation_force;
uniform float alignment_force;
uniform float cohesion_force;

uniform float cell_spacing;
uniform uint table_size;


float distSquared(vec3 A, vec3 B) {
    const vec3 C = A - B;
    return dot(C, C);
}

ivec3 cell_xyz(vec3 pos)
{
    return ivec3(floor(pos / cell_spacing));
}

uint hash(ivec3 cell_index)
{
    const int h = (cell_index.x * 92837111) ^ (cell_index.y * 689287499) ^ (cell_index.z * 283923481);
    return abs(h) % table_size;
    // const uint p1 = 73856093; // some large primes
    // const uint p2 = 19349663;
    // const uint p3 = 83492791;
    // uint n = p1 * cell_index.x ^ p2*cell_index.y ^ p3*cell_index.z;
    // n %= (table_size);
    // return n;
}


void main() {
    const uint id = gl_GlobalInvocationID.x;

    if (id >= boid_count) {
        return;
    }

    vec3 ourDir = In_boids.boids[id].dir.xyz;
    vec3 ourPos = In_boids.boids[id].pos.xyz + (ourDir * speed);

    uint nb_flockmates = 0;
    vec3 averageDirection = vec3(0.0, 0.0, 0.0);
    vec3 averagePosition = vec3(0.0, 0.0, 0.0);
    vec3 totalForce = vec3(0.0, 0.0, 0.0);


    const ivec3 low = cell_xyz(ourPos - view_distance);
    const ivec3 high = cell_xyz(ourPos + view_distance);

    // uint hash_index;

    for (int x = low.x; x <= high.x; ++x) {
        for (int y = low.y; y <= high.y; ++y) {
            for (int z = low.z; z <= high.z; ++z) {

                const uint hash_index = hash(ivec3(x, y, z));

                for (uint j = cell_start[hash_index] ; sorted_table[j].cell_id == hash_index ; ++j) {
                    const uint i = sorted_table[j].boid_id;
                    if (id == i) continue; // don't check if itself

                    const vec3 theirPos = In_boids.boids[i].pos.xyz;
                    const vec3 theirDir = In_boids.boids[i].dir.xyz;

                    const vec3 offset = ourPos - theirPos;
                    const float sqrDist = dot(offset, offset);
                    if (sqrDist < view_distance * view_distance) {

                        const float r = dot((theirPos - ourPos)/length(theirPos - ourPos), ourDir/length(ourDir)); // vision max angle ? can't remember
                        if (length(acos(r)) <= view_angle) {
                            nb_flockmates += 1;
                            averageDirection += theirDir;
                            averagePosition += theirPos;

                            // separation
                            totalForce += offset / sqrDist;
                        }
                    }
                }

            }
        }
    }
    /*
    */

    /*
    for (int i = 0 ; i < boid_count ; ++i) {
        if (id == i) continue; // don't check if itself

        const vec3 theirPos = In_boids.boids[i].pos;
        const vec3 theirDir = In_boids.boids[i].dir;

        // tests
        const vec3 p = theirPos;
        const vec3 v = ourPos;
        const vec3 d = ourDir;
        const float r = dot((p - v)/length(p - v), d/length(d));

        const float sqrDist = distSquared(ourPos, theirPos);
        if (sqrDist < view_distance * view_distance) {
            if (length(acos(r)) <= view_angle) {
                nb_flockmates += 1;
                averageDirection += theirDir;
                averagePosition += theirPos;

                // separation
                totalForce += (ourPos - theirPos) / sqrDist;
            }
        }
    }
    */

    // separation
    ourDir += totalForce * separation_force;

    if (nb_flockmates != 0) {
        // alignment
        averageDirection /= nb_flockmates;
        ourDir += averageDirection * alignment_force;

        // cohesion
        averagePosition /= nb_flockmates;
        ourDir += -(ourPos - averagePosition) * cohesion_force;
    }

    // border limit
    #if (CUBE == 1)
        const vec3 np = ourPos + (ourDir * speed);
        const float mp2 = map_size * 0.5;
        if (np.x < -mp2 || np.x > mp2 || np.y < -mp2 || np.y > mp2 || np.z < -mp2 || np.z > mp2) {
            const vec3 to_center = normalize(vec3(0, 0, 0) - ourPos);
            ourDir += to_center * 0.1;
        }
    #endif

    #if (CUBE_T == 1)
        const float map_size2 = map_size * 0.5;
        if (ourPos.x < -map_size2)
            ourPos.x = map_size2;
        else if (ourPos.x > map_size2)
            ourPos.x = -map_size2;

        if (ourPos.y < -map_size2)
            ourPos.y = map_size2;
        else if (ourPos.y > map_size2)
            ourPos.y = -map_size2;

        if (ourPos.z < -map_size2)
            ourPos.z = map_size2;
        else if (ourPos.z > map_size2)
            ourPos.z = -map_size2;
    #endif

    #if (SPHERE == 1)

        if (length(ourPos) > map_size) {
            const vec3 to_center = normalize(vec3(0, 0, 0) - ourPos);
            ourDir += to_center * 0.1;
        }
    #endif

    #if (SPHERE_T == 1)
        if (length(ourPos) > map_size) {
            ourPos = -normalize(ourPos) * map_size;
        }
    #endif

    Out_boids.boids[id].pos.xyz = ourPos;
    Out_boids.boids[id].dir.xyz = normalize(ourDir);
}

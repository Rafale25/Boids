#version 430

layout(local_size_x=512, local_size_y=1, local_size_z=1) in;

struct Boid {
    vec3 pos;
    float a; // useless as fuck
    vec3 dir;
    float b; // useless as fuck
};

struct Hash {
    uint cell_id;
    uint boid_id;
};

layout(std430, binding=0) buffer buffer_boids {
    Boid b_boid[];
};

layout(std430, binding=1) buffer buffer_unsorted {
    Hash b_unsorted[];
};

layout(std430, binding=2) buffer buffer_sorted {
    Hash b_sorted[];
};

layout(std430, binding=3) buffer buffer_cell_start {
    uint cell_start[];
};

uniform int boid_count;
uniform float map_size;

uniform int SH_size;
// example: SH_size = 8 -> 8*8*8 = 512

void main() {
    const uint id = gl_GlobalInvocationID.z * gl_NumWorkGroups.y * gl_NumWorkGroups.x +
                    gl_GlobalInvocationID.y * gl_NumWorkGroups.x +
                    gl_GlobalInvocationID.x;

    if (id >= boid_count) return;
    Boid boid = b_boid[id];

    uint cell_id = 0;// = getCellId();
    b_unsorted[id].cell_id = cell_id;
    b_unsorted[id].boid_id = id;

    // sort b_unsorted into b_sorted by cell_id
}
